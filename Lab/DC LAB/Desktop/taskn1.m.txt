pi=3.14;
Fs=100;
F = 3;
t=(0:1/Fs:1);
x=sin(2*pi*F*t);
figure
subplot(4,1,1)
plot(x)
title('original')
%exact nyquist
nyquist=x(2:2:length(x));
subplot(4,1,2)
stem(nyquist)
title('sampling')
%quantization
step_size=(max(x)-min(x))/8;
p_vector=min(x):step_size:max(x)-step_size;
code_book=min(x):step_size:max(x);
[index,uni_quant]=quantiz(x,p_vector,code_book);
subplot(4,1,3)
stem(uni_quant)
title('uniform quantized')
%encoding
index=abs(index-1);

bitstream=[];
for i=1:1:length(index)
    bitstream=[bitstream de2bi(index(i),3)];
end
bitrate=10;
T = length(bitstream)/bitrate; 
n = 200;
N = n*length(bitstream);
dt = T/N;
t = 0:dt:T;
y = zeros(1,length(t)); 
j=1;
for k=1:200:length(t)-200
    if(bitstream(j)==1)
        y(k:k+199)=+5;
    else
        y(k:k+199)=-5;
    end
    j = j+1;
end
subplot(4,1,4)
stem(y)
title('line encoding')
%noise created plus added
noise1=0.5*randn(1,length(y));
noise2=1*randn(1,length(y));
noise3=10*randn(1,length(y));
new_signal1=y+noise1;
new_signal2=y+noise2;
new_signal3=y+noise3;
b=[];
i=1;
for i=1:200:length(new_signal1)
    s=(sum(i:i+199)/200);
    if (s>0)
        b(i)=1;
    else
        b(i)=0;
    end
    i=i+1;
end
c=[];
i=1;
for i=1:200:length(new_signal2)
    s=(sum(i:i+199)/200);
    if (s>0)
        c(i)=1;
    else
        c(i)=0;
    end
    i=i+1;
end
d=[];
i=1;
for i=1:200:length(new_signal3)
    s=(sum(i:i+199)/200);
    if (s>0)
        d(i)=1;
    else
        d(i)=0;
    end
    i=i+1;
end
figure
subplot(3,1,1)
stem(b)
subplot(3,1,2)
stem(c)
subplot(3,1,3)
stem(d)

BER1=sum(xor(bitstream,b));
BER2=sum(xor(bitstream,c));
BER3=sum(xor(bitstream,d));

decode_1 = [];
decode_2 = [];
decode_3 = [];

i=1;
for k=1:4:length(b)
    sample = [b(k) b(k+1) b(k+2) b(k+3)];
    decoded1(i) = bi2de(sample,'right-msb');
    i=i+1;
end

i=1;
for k=1:4:length(c)
    sample = [c(k) c(k+1) c(k+2) c(k+3)];
    decoded2(i) = bi2de(sample,'right-msb');
    i=i+1;
end

i=1;
for k=1:4:length(d)
    sample = [d(k) d(k+1) d(k+2) d(k+3)];
    decoded3(i) = bi2de(sample,'right-msb');
    i=i+1;
end

figure
subplot(4,1,1)
plot(uni_quant)
subplot(4,1,2)
plot(decoded1)
subplot(4,1,3)
plot(decoded2)
subplot(4,1,4)
plot(decoded3)

